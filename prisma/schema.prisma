generator client {
  provider = "prisma-client-js"
}

//프로바이더 -> 프리즈마가 쓸 데이터베이스 유형임 // url: 데이터베이스를 연결하기 위한 URL
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId Int @id @default(autoincrement()) @map("userId")

  email    String @unique @map("email")
  password String @map("password")
  name     String @map("name")

  gender   gender    @map("gender")
  height   height?   @map("height")
  figure   figure?   @map("figure")

  district    String? @map("district")
  description String? @map("description") @db.Text
  nickName    String? @map("nickName")
  mbti        String? @map("mbti")
  age         Int?    @map("age")
  reportCount Int     @default(0)   @map("report_count")
  reportPoint Int     @default(0)   @map("reportPoint")
  ticket      Int     @default(3)    @map("ticket")

  //현재 시각을 기본값으로
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  // 현재 테이블이 해당 테이블과 1:N 관계를 맺습니다.
  GroupMessages   GroupMessages[]
  CoupleMessage   CoupleMessage[]

  GroupMeetings   GroupMeetings  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  CoupleMeetings  CoupleMeetings @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("users")
}

enum gender{
  male
  female
}

enum height{
  ~155
  155~160
  160~165
  165~170
  170~175
  175~
}

enum figure{
  slim
  medium
  plmup
  muscular
}

model GroupMeetings {
  groupMeetingId Int @id @default(autoincrement()) @map("groupMeetingId")
  userId        Int @map("userId")
  groupMessageId int @map("groupMessageId")

  createdAt DateTime @default(ow()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Users          Users[]
  GroupMessages  GroupMessages[]

  @@map("GroupMeetings")
}


//model GroupMembers {
  groupMemberId Int @id @default(autoincrement()) @map("gmId")
  userId        Int @map("userId")
  groupId       Int @map("groupId")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Users  Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  GroupMeetings GroupMeetings[]

  @@map("GroupMembers")
}

model GroupMessages {
  groupMessageId Int @id @default(autoincrement()) @map("groupMessageId")
  description    String @map("description") @db.Text
  userId         Int @map("userId")
  groupMemberId  Int @map("groupMemberId")
  groupMeetingId Int @map("groupMeetingId")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Users          Users          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  //GroupMembers   GroupMembers  @relation(fields: [groupMemberId], references: [groupMessageId], onDelete: Cascade)
  //GroupMeetings GroupMeetings @relation(fields: [groupMeetingId], references: [groupMeetingId], onDelete: Cascade)

  @@map("GroupMessages")
}

 model CoupleMeetings {
   coupleMeetingId   Int @id @default(autoincrement()) @map("coupleMeetingId")
   userId     Int @map("userId")
   coupleMessageId Int @map("coupleMessageId")

   createdAt DateTime @default(now()) @map("createdAt")
   updatedAt DateTime @updatedAt @map("updatedAt")

   Users  Users[]
   CoupleMessages  CoupleMessages[]

   @@map("CoupleMeetings")
 }

 model CoupleMessages {
   coupleMessageId Int @id @default(autoincrement()) @map("coupleMessageId")
   description    String @map("description") @db.Text
   userId    Int @map("userId")
   coupleMeetingId  Int @map("coupleMeetingId")

   createdAt DateTime @default(now()) @map("createdAt")
   updatedAt DateTime @updatedAt @map("updatedAt")

   Users           Users          @relation(fields: [userId], references: [userId], onDelete: Cascade)
   //CoupleMeetings  CoupleMeetings @relation(fields: [coupleMeetingId], references: [coupleMeetingId], onDelete: Cascade)

   @@map("CoupleMessages")
 }
