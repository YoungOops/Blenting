generator client {
  provider = "prisma-client-js"
}

//프로바이더 -> 프리즈마가 쓸 데이터베이스 유형임 // url: 데이터베이스를 연결하기 위한 URL
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 1:1 의 관계의 경우 서로의 외래키를 갖고 있으면 순환참조로 인해 모델 생성이나 삭제 시 순환적 종속성 때문에 문제 발생
// 1:1 관계 시 userId @unique 설정
model Auths {
  id       Int    @id @default(autoincrement()) @map("id")
  userId   Int    @unique
  email    String @unique @map("email")
  password String @map("password")

  // 현재 테이블이 해당 테이블과 1:1 관계를 맺습니다.
  Users Users @relation(fields: [userId], references: [id])

  @@map("auths")
}

enum gender {
  MALE
  FEMALE
}

enum height {
  CASE1
  CASE2
  CASE3
  CASE4
  CASE5
}

enum figure {
  SLIM
  MEDIUM
  PLMUP
  MUSCULAR
}

enum want1 {
  HEIGHT
  FIGURE
  MBTI
  HOBBY
  JOB
  AGE
  DISTRICT
}

enum want2 {
  HEIGHT
  FIGURE
  MBTI
  HOBBY
  JOB
  AGE
  DISTRICT
}

enum want3 {
  HEIGHT
  FIGURE
  MBTI
  HOBBY
  JOB
  AGE
  DISTRICT
}

// 1:1 의 관계의 경우 서로의 외래키를 갖고 있으면 순환참조로 인해 모델 생성이나 삭제 시 순환적 종속성 때문에 문제 발생
model Users {
  id Int @id @default(autoincrement()) @map("id")

  gender gender @map("gender")
  height height? @map("height")
  figure figure? @map("figure")
  want1  want1?  @map("want1")
  want2  want2?  @map("want2")
  want3  want3?  @map("want3")

  district    String? @map("district")
  description String? @map("description") @db.Text
  nickName    String  @unique @map("nick_name")
  mbti        String? @map("mbti")
  hobby       String? @map("hobby")
  job         String? @map("job")
  age         Int?    @map("age")
  reportCount Int     @default(0) @map("report_count")
  reportPoint Int     @default(0) @map("report_point")
  ticket      Int     @default(3) @map("ticket")

  //현재 시각을 기본값으로
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 현재 테이블이 해당 테이블과 1:1 관계를 맺습니다.
  Auths Auths?

  // 현재 테이블이 해당 테이블과 1:N 관계를 맺습니다.
  Messages Messages[]
  Members  Members[]

  @@map("users")
}

enum type {
  GROUP
  COUPLE
}

model Meetings {
  id   Int  @id @default(autoincrement()) @map("id")
  type type @default(GROUP) @map("type")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Members  Members[]
  Messages Messages[]

  @@map("meetings")
}

model Members {
  id        Int @id @default(autoincrement()) @map("id")
  userId    Int @map("user_id")
  meetingId Int @map("meeting_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Users    Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Meetings Meetings @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@map("members")
}

model Messages {
  id          Int    @id @default(autoincrement()) @map("id")
  description String @map("description") @db.Text
  userId      Int    @map("user_id")
  meetingId   Int    @map("meeting_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Users    Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Meetings Meetings @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Questions {
  id          Int    @id @default(autoincrement()) @map("id")
  description String @map("description") @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("questions")
}

model Payments {
  id          Int    @id @default(autoincrement()) @map("id")
  packageName String @map("package_name")
  ticketCount Int    @map("ticket_count")
  price       Int    @map("price")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("payments")
}
